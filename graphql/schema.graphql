"A datetime string with format `Y-m-d H:i:s`, e.g. `2018-05-23 13:43:32`."
scalar DateTime @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\DateTime")

"Indicates what fields are available at the top level of a query operation."
type Query {
    "Find a single user by an identifying attribute."
    user(
      "Search by primary key."
      id: ID @eq @rules(apply: ["prohibits:email", "required_without:email"])

      "Search by email address."
      email: String @eq @rules(apply: ["prohibits:id", "required_without:id", "email"])
    ): User @find

    "List multiple users."
    users(
      "Filters by name. Accepts SQL LIKE wildcards `%` and `_`."
      name: String @where(operator: "like")
    ): [User!]! @paginate(defaultCount: 10)

    # ticket(id: Int! @where(operator: "=", key: "id")): Ticket @find
    ticket(id: Int! @eq): Ticket @find

    tickets: [Ticket!]! @all
}

"Account of a person who utilizes this application."
type User {
    "Unique primary key."
    id: ID!

    "Non-unique name."
    name: String!

    "Unique email address."
    email: String!

    admin: Boolean!

    "When the email was verified."
    email_verified_at: DateTime

    "When the account was created."
    created_at: DateTime!

    "When the account was last updated."
    updated_at: DateTime!

    tickets: [Ticket!]! @belongsToMany
    # ticketsaaa: [Ticket!]! @belongsToMany(relation: "tickets")

    comments: [Comment!]! @hasMany
}

type Ticket {
    id: ID!
    title: String!
    done: Boolean!
    priority: TicketPriority!
    created_at: DateTime!
    updated_at: DateTime!
    deleted_at: DateTime

    users: [User!]! @belongsToMany
    comments: [Comment!]! @hasMany

    countComments: Int! @count(relation: "comments")

    avgPriority: Float! @aggregate(model: "Ticket", column: "priority", function: AVG)
}

type Comment {
    id: ID!
    text: String!
    filename: String!
    filename_hash: String!
    created_at: DateTime!
    updated_at: DateTime!

    ticket: Ticket! @belongsTo
    user: User! @belongsTo
}

type Mutation {
    # createUser(name: String!, email: String!, password: String!): User! @create
    createUser(input: CreateTicketInput @spread): User! @create

    updateUser(id: Int!, name: String, email: String, password: String): User! @update

    deleteUser(id: Int! @whereKey @rules(apply: ["exists:users,id"])): User @delete

    createTicket(
        title: String! @rules(apply: ["string"]),
        priority: TicketPriority! @rules(apply: ["integer", "min:0", "max:3"]),
        text: String! @rules(apply: ["string"])
    ): Ticket! @guard

    syncUsers(input: SyncUsersInput @spread): SyncUsersResult! @guard
}

input CreateTicketInput {
    name: String @rules(
        apply: ["required", "string"]
    )
    email: String!  @rules(
        apply: ["required", "string", "unique:users,email"],
        attribute: "Ímél",
        messages: [
            {
                rule: "unique",
                message: ":attribute már foglalt!"
            }
        ]
    )
    password: String!  @rules(
        apply: ["required", "string"]
    )
}

input SyncUsersInput @validator {
    ticketId: Int!,
    up: [Int!]!,
    down: [Int!]!,
}

type SyncUsersResult {
    successUp: [Int!]!,
    successDown: [Int!]!,
    errorUp: [Int!]!,
    errorDown: [Int!]!,
}

enum TicketPriority {
    LOW @enum(value: 0)
    STANDARD @enum(value: 1)
    HIGH @enum(value: 2)
    IMMEDIATELY @enum(value: 3)
}
